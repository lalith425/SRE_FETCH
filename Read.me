SRE FETCH Take Home Assignment – Endpoint Health Monitor

Overview

This project is a health monitoring script that evaluates the availability of HTTP endpoints based on configuration from a YAML file. It performs checks every 15 seconds and logs the availability percentage for each domain. The system is designed to handle malformed inputs gracefully and focuses on correctness, performance, and clarity.

Installation
  Prerequisites
    Python 3.6 or higher

 This project uses the following third-party packages:

   pyyaml – For parsing the YAML configuration file
   requests – For sending HTTP/HTTPS requests to endpoints

Install them using pip:

Command:
pip install pyyaml requests

Issue 1: Initially when you run you will get the exception since one of the endpoints in the input doest have any methods. Since its null it will throw an exception.
Solution: 
   method = endpoint.get('method', 'GET')
   Added the default value to GET and this ensures that endpoints without a specified method default to GET, as required by the assignment.

Issue 2: Domain Grouping Without Port
  As per the current code "endpoint["url"].split("//")[-1].split("/")[0]" works for simple URLs but fails when the URL includes a port number. Tested by giving the URL with port.
Split the result further to remove the port:
  domainUrl = endpoint["url"].split("//")[-1].split("/")[0]
  domain = domainUrl.split(":")[0]

 Once again tested it with port and its scaping only the domain.


Feature 1:
  Need to add the check for response time. If its more than 500ms it should be considered unavailable.
        startReqTime = time.time()
        response = requests.request(method, url, headers=headers, json=body)
        timeTaken = (time.time() - startReqTime) * 1000
        if 200 <= response.status_code < 300 and timeTaken < 500:

 get the start time before sending the req and caclulate the time taken after receiving the responds and added the condition to check timetaken  less than 500ms.


  Feature 2: Stats Reset Every Cycle
    At first, the code was keeping track of domain stats outside the loop. That means the counts kept adding up forever — even after every 15-second check. So the 
    availability percentage wasn’t accurate for each new cycle. It showed an average over time instead of just the current status.

  Fix - I moved the stats tracking inside the while True loop:
        while True:
        domain_stats = defaultdict(lambda: {"up": 0, "total": 0})

  This way, the stats get cleared and start fresh every 15 seconds. It now shows the correct availability for just that cycle.


Feature 3 : Input Validation
  Added the validation for mandatory fields like name and url. If its not present or null as part of yaml file then its skipped with the proper error log.

            for endpoint in config:
            required_fields = ["url", "name"]
            if "url" not in endpoint or not endpoint["url"]:
                print("URL field is mandatory so skipping the endpoint' → {endpoint}")
                continue
            if "name" not in endpoint or not endpoint["name"]:
                print("Name field is mandatory so skipping the endpoint' → {endpoint}")
                continue  


Feature 4: Per-Endpoint Health Logging

   The original code only showed domain-level availability. It was hard to know which specific endpoint was UP or DOWN.
    Fix: Added log
      print(f"The result of the endpoint '{endpoint['name']}' ({endpoint['url']}) is [{result}]")
      This helps clearly see the status of every individual endpoint during each cycle.






